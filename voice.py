# -*- coding: utf-8 -*-
"""Voice.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/116tm1RtUVDwfy5Ouxfp8Rsvfv8eLGD0B
"""

import os
import numpy as np
import librosa
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, accuracy_score

# Set your dataset path
data_dir = r"/content/drive/MyDrive/Voice_Rego"

# Function to extract MFCC features
def extract_features(file_path):
    try:
        audio, sr = librosa.load(file_path, duration=3, offset=0.5)
        mfccs = librosa.feature.mfcc(y=audio, sr=sr, n_mfcc=13)
        return np.mean(mfccs.T, axis=0)
    except Exception as e:
        print("Error loading file:", file_path, e) # Print the exception
        return None

# Load features and labels
features = []
labels = []
for folder in os.listdir(data_dir):
    emotion = folder.split('_')[-1].lower()  # Extract 'angry', 'sad', etc.
    folder_path = os.path.join(data_dir, folder)
    print(f"Processing folder: {folder_path}") # Print current folder being processed
    if not os.path.isdir(folder_path): # Check if it is a directory
        print(f"Skipping {folder_path} as it is not a directory.")
        continue
    audio_files = [f for f in os.listdir(folder_path) if f.endswith(".mp3")] # Filter for .wav files
    print(f"Found {len(audio_files)} .mp3 files in {folder}.") # Print the number of wav files found
    for filename in audio_files:
        file_path = os.path.join(folder_path, filename)
        mfcc = extract_features(file_path)
        if mfcc is not None:
            features.append(mfcc)
            labels.append(emotion)

# Convert to NumPy
X = np.array(features)
y = np.array(labels)

print(f"Extracted features for {len(X)} files.") # Print the number of features extracted

# Train/Test Split
if len(X) > 0: # Check if there are any features before splitting
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Model
    model = RandomForestClassifier()
    model.fit(X_train, y_train)

    # Predict
    y_pred = model.predict(X_test)

    # Results
    print("‚úÖ Accuracy:", accuracy_score(y_test, y_pred))
    print("\nüßæ Classification Report:\n", classification_report(y_test, y_pred))
else:
    print("‚ùå No features were extracted. Please check your data directory and file paths.") # Inform the user if no features were extracted

from google.colab import files
uploaded = files.upload()  # Upload a new WAV file here
# Predict emotion
def predict_emotion(file_path):
    mfcc = extract_features(file_path)
    if mfcc is not None:
        return model.predict(mfcc.reshape(1, -1))[0]
    else:
      return "Could not process audio"
# Example
for fname in uploaded.keys():
    print(f"üéß {fname}: {predict_emotion(fname)}")